import pandas as pd
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font, Border, Side, PatternFill
import os
import logging

# Set up logging
logging.basicConfig(filename='dcm_tool_log.txt', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Input data with detailed descriptions
inputs_data = {
    'Geometry': {
        'B': (44.0, 'm', 'Width of DCM-improved zone (m)'),
        'BS': (12.0, 'm', 'Width of DCM-improved zone at seaside (m)'),
        'BL': (32.0, 'm', 'Width of DCM-improved zone at landside (m)'),
        'zdm_bottom': (-20.0, 'mPD', 'Bottom level of DCM-improved zone (mPD)'),
        'as_s': (0.35, '', 'DCM area replacement ratio'),
        'bl': (2.1, 'm', 'Equivalent width of a DCM shear wall panel (m)'),
        'sshear': (6.0, 'm', 'Centre-to-centre spacing (m)'),
        'bs': (3.9, 'm', 'Clear spacing between DCM shear wall panels (m)'),
        'Hs': (4.0, 'm', 'Height of DCM transfer slab (m)'),
        'Cl': (1.7, 'm', 'Total chord length (m)')
    },
    'Geology': {
        'zw_l': (1.0, 'mPD', 'Water level at landside (mPD)'),
        'zw_s': (0.3, 'mPD', 'Water level at seaside (mPD)'),
        'zfill_top': (5.5, 'mPD', 'Top level of Reclamation Fill (mPD)'),
        'zMD_top': (-5.0, 'mPD', 'Top level of Marine Deposits (mPD)'),
        'zALL_top': (-18.0, 'mPD', 'Top level of Alluvial Clay (mPD)'),
        'zALL_bottom': (-27.0, 'mPD', 'Bottom level of Alluvial Clay (mPD)'),
        'Hfill_dry': (4.5, 'm', 'Thickness of Reclamation Fill above water level (m)'),
        'Hfill_submerged': (6.0, 'm', 'Thickness of Reclamation Fill below water level (m)'),
        'Hfill': (10.5, 'm', 'Total thickness of Reclamation Fill (m)'),
        'HMD': (13.0, 'm', 'Thickness of Marine Deposits (m)'),
        'HALL': (9.0, 'm', 'Thickness of Alluvial Clay (m)'),
        'Hdm': (15.0, 'm', 'Height of DCM-improved zone (m)'),
        'Hdm_emb': (2.0, 'm', 'Length of DCM embedment into Alluvial Clay (m)')
    },
    'Soil Properties': {
        'gamma_fill': (18.0, 'kN/m³', 'Dry and/or saturated bulk unit weight of Reclamation Fill (kN/m³)'),
        'gamma_MD': (15.0, 'kN/m³', 'Bulk unit weight of Marine Deposits (kN/m³)'),
        'gamma_ALL': (19.0, 'kN/m³', 'Bulk unit weight of Alluvial Clay (kN/m³)'),
        'gamma_w': (10.0, 'kN/m³', 'Unit weight of water (kN/m³)'),
        'phi_f_fill': (23.9, 'deg', 'Factored effective friction angle of Reclamation Fill (deg)'),
        'su_f_MD_active_top': (14.6, 'kPa', 'Factored undrained shear strength of Marine Deposits [active side] [top] (kPa)'),
        'su_f_MD_active_bottom': (24.8, 'kPa', 'Factored undrained shear strength of Marine Deposits [active side] [bottom] (kPa)'),
        'su_f_MD_passive_top': (3.2, 'kPa', 'Factored undrained shear strength of Marine Deposits [passive side] [top] (kPa)'),
        'su_f_MD_passive_bottom': (13.4, 'kPa', 'Factored undrained shear strength of Marine Deposits [passive side] [bottom] (kPa)'),
        'su_f_ALL_top': (46.2, 'kPa', 'Factored undrained shear strength of Alluvial Clay [top] (kPa)'),
        'su_f_ALL_bottom': (50.0, 'kPa', 'Factored undrained shear strength of Alluvial Clay [bottom of DCM] (kPa)'),
        'cw_cu': (0.5, '', 'Wall adhesion ratio cw/cu'),
        'K0': (0.75, '', 'At rest earth pressure coefficient'),
        'Nc': (7.5, '', 'Bearing capacity factor for undrained')
    },
    'DCM Strength': {
        'qt_day': (1200.0, 'kPa', 'Design unconfined compressive strength (kPa)'),
        'Sdm': (0.0, 'kPa', 'Design shear strength of DCM (kPa)'),
        'gamma_m': (1.3, '', 'Material factor'),
        'Sdm_f': (0.0, 'kPa', 'Factored design shear strength of DCM (kPa)')
    },
    'Loading': {
        'Fx': (30.4, 'kN/m', 'Resultant of horizontal component of wave pressure (kN/m)'),
        'Fz': (3.6, 'kN/m', 'Resultant of vertical component of wave pressure (kN/m)'),
        'hF': (20.7, 'm', 'Vertical distance from point “O” to the line of action of Fx (m)'),
        'xF': (14.3, 'm', 'Horizontal distance from point “O” to the line of action of Fz (m)'),
        'qLL': (10.0, 'kPa', 'Live load (kPa)'),
        'qs': (36.0, 'kPa', 'Fill surcharge (kPa)')
    }
}

# Styling functions
def apply_styling(ws, start_row, end_row, start_col=1, end_col=4):
    thin_border = Border(left=Side(style='thin'), right=Side(style='thin'),
                         top=Side(style='thin'), bottom=Side(style='thin'))
    highlight_fill = PatternFill(start_color="FFFF99", end_color="FFFF99", fill_type="solid")
    title_font = Font(size=14, bold=True)
    header_font = Font(size=12, bold=True)
    input_font = Font(size=11)

    # Title and narrative
    ws['A1'].font = title_font
    ws['A2'].font = input_font
    ws['A3'].font = input_font

    # Headers
    for col in range(start_col, end_col + 1):
        cell = ws.cell(row=start_row, column=col)
        cell.font = header_font
        cell.border = thin_border

    # Data
    for row in range(start_row + 1, end_row + 1):
        for col in range(start_col, end_col + 1):
            cell = ws.cell(row=row, column=col)
            cell.border = thin_border
            cell.font = input_font
            if col == 2 and ws.cell(row=row, column=1).value in ['B', 'Hdm', 'as_s', 'qt_day', 'Fx']:
                cell.fill = highlight_fill

    # Adjust column widths
    for col in range(start_col, end_col + 1):
        ws.column_dimensions[get_column_letter(col)].width = 25 if col == 1 else 20

# Create and populate workbook
temp_file = 'DCM_Design_Tool_temp.xlsx'
final_file = 'DCM_Design_Tool.xlsx'

try:
    wb = Workbook()
    ws = wb.active
    ws.title = 'Inputs'

    # Write Inputs sheet
    ws['A1'] = 'DCM Design Tool for Geotechnical Calculations'
    ws.merge_cells('A1:D1')
    ws['A2'] = 'Modify highlighted "Value" cells to update calculations. Calculations update live.'
    ws['A3'] = 'Sections: Geometry, Geology, Soil Properties, DCM Strength, Loading.'
    ws['A6'] = 'Table 6.1 - Input Parameters for Geometry'
    ws.append(['Parameter', 'Value', 'Unit', 'Description'])

    row = 8
    for category, params in inputs_data.items():
        if row > 8:
            ws[f'A{row}'] = f'Table 6.{2 if category == "Geology" else 3 if category == "Soil Properties" else 4} - Input Parameters for {category}'
            ws.merge_cells(f'A{row}:D{row}')
            row += 1
            ws.append(['Parameter', 'Value', 'Unit', 'Description'])
        if category == 'Geology':
            ws[f'A{row}'] = 'Design Water Levels'
            ws.merge_cells(f'A{row}:D{row}')
            row += 1
            ws.append(['zw_l', 1.0, 'mPD', 'Water level at landside (mPD)'])
            ws.append(['zw_s', 0.3, 'mPD', 'Water level at seaside (mPD)'])
            row += 2
            ws[f'A{row}'] = 'Soil Stratigraphy'
            ws.merge_cells(f'A{row}:D{row}')
            row += 1
        for param, (value, unit, desc) in params.items():
            ws.append([param, value, unit, desc])
            row += 1
        row += 1

    # Apply styling to Inputs
    apply_styling(ws, 7, row - 1)

    # Set calculated fields
    ws['B57'] = '=0.5 * B56'  # Sdm = 0.5 * qt_day
    ws['B59'] = '=B57 / B58'  # Sdm_f = Sdm / gamma_m

    # Calculations sheet
    ws_calc = wb.create_sheet('Calculations')
    ws_calc['A1'] = 'Section 6.4 and 6.5 - Calculation of Lateral and Vertical Forces'
    ws_calc.merge_cells('A1:C1')
    ws_calc['A2'] = 'Values for active and passive lateral forces and vertical forces.'
    ws_calc.append(['Step', 'Parameter', 'Value (kN/m or m)'])

    calc_data = [
        ['6.4.1.1 Active Lateral Forces from Reclamation Fill', 'Ka_fill', '=TAN(RADIANS(45-$Inputs.B$44/2))^2'],
        ['', 'Pa_fill_dry_rect', '=$Inputs.B$30 * C5 * ($Inputs.B$66 + $Inputs.B$67)'],
        ['', 'ha_fill_dry_rect', '=$Inputs.B$35 + $Inputs.B$33 + $Inputs.B$31 + $Inputs.B$30/2'],
        ['', 'Pa_fill_dry_tri', '=0.5 * C5 * $Inputs.B$39 * $Inputs.B$30^2'],
        ['', 'ha_fill_dry_tri', '=$Inputs.B$35 + $Inputs.B$33 + $Inputs.B$31 + $Inputs.B$30/3'],
        ['', 'Pa_fill_submerged_rect', '=$Inputs.B$31 * C5 * ($Inputs.B$66 + $Inputs.B$67 + $Inputs.B$39 * $Inputs.B$30)'],
        ['', 'ha_fill_submerged_rect', '=$Inputs.B$35 + $Inputs.B$33 + $Inputs.B$31/2'],
        ['', 'Pa_fill_submerged_tri', '=0.5 * C5 * ($Inputs.B$39 - $Inputs.B$43) * $Inputs.B$31^2'],
        ['', 'ha_fill_submerged_tri', '=$Inputs.B$35 + $Inputs.B$33 + $Inputs.B$31/3'],
        ['', 'Pa_fill', '=C6 + C8 + C10 + C12'],
        ['', 'ha_fill', '=(C6*C7 + C8*C9 + C10*C11 + C12*C13)/C14'],
        ['6.4.1.2 Active Lateral Forces from Marine Deposits', 'Pa_MD_rect', '=$Inputs.B$33 * ($Inputs.B$66 + $Inputs.B$67 + $Inputs.B$39 * $Inputs.B$32 - 2 * SQRT(1 + $Inputs.B$51) * $Inputs.B$45)'],
        ['', 'ha_MD_rect', '=$Inputs.B$35 + $Inputs.B$33/2'],
        ['', 'Pa_MD_tri', '=0.5 * $Inputs.B$33 * ($Inputs.B$40 * $Inputs.B$33 - 2 * SQRT(1 + $Inputs.B$51) * ($Inputs.B$46 - $Inputs.B$45))'],
        ['', 'ha_MD_tri', '=$Inputs.B$35 + $Inputs.B$33/3'],
        ['', 'Pa_MD', '=C16 + C18'],
        ['', 'ha_MD', '=(C16*C17 + C18*C19)/C20'],
        ['6.4.1.3 Active Lateral Forces from Alluvial Clay', 'Pa_ALL_rect', '=$Inputs.B$35 * ($Inputs.B$66 + $Inputs.B$67 + $Inputs.B$39 * $Inputs.B$32 + $Inputs.B$40 * $Inputs.B$33 - 2 * SQRT(1 + $Inputs.B$51) * $Inputs.B$49)'],
        ['', 'ha_ALL_rect', '=$Inputs.B$35/2'],
        ['', 'Pa_ALL_tri', '=0.5 * $Inputs.B$35 * ($Inputs.B$42 * $Inputs.B$35 - 2 * SQRT(1 + $Inputs.B$51) * ($Inputs.B$50 - $Inputs.B$49))'],
        ['', 'ha_ALL_tri', '=$Inputs.B$35/3'],
        ['', 'Pa_ALL', '=C22 + C24'],
        ['', 'ha_ALL', '=(C22*C23 + C24*C25)/C26'],
        ['6.4.1.4 Lateral Water Force at Active Side', 'Pa_w', '=0.5 * $Inputs.B$43 * $Inputs.B$31^2'],
        ['', 'ha_w', '=$Inputs.B$35 + $Inputs.B$33 + $Inputs.B$31/3'],
        ['Total Active Lateral Force', 'Pa', '=C14 + C20 + C26 + C28'],
        ['', 'ha', '=(C14*C15 + C20*C21 + C26*C27 + C28*C29)/C30'],
        ['6.4.2.1 Passive Lateral Forces from Marine Deposits', 'Pp_MD_rect', '=$Inputs.B$33 * ($Inputs.B$43 * ($Inputs.B$22 - $Inputs.B$27) + 2 * SQRT(1 + $Inputs.B$51) * $Inputs.B$47)'],
        ['', 'hp_MD_rect', '=$Inputs.B$35 + $Inputs.B$33/2'],
        ['', 'Pp_MD_tri', '=0.5 * $Inputs.B$33 * ($Inputs.B$40 * $Inputs.B$33 + 2 * SQRT(1 + $Inputs.B$51) * ($Inputs.B$48 - $Inputs.B$47))'],
        ['', 'hp_MD_tri', '=$Inputs.B$35 + $Inputs.B$33/3'],
        ['', 'Pp_MD', '=C32 + C34'],
        ['', 'hp_MD', '=(C32*C33 + C34*C35)/C36'],
        ['6.4.2.2 Passive Lateral Forces from Alluvial Clay', 'Pp_ALL_rect', '=$Inputs.B$35 * ($Inputs.B$43 * ($Inputs.B$22 - $Inputs.B$27) + $Inputs.B$40 * $Inputs.B$33 + 2 * SQRT(1 + $Inputs.B$51) * $Inputs.B$49)'],
        ['', 'hp_ALL_rect', '=$Inputs.B$35/2'],
        ['', 'Pp_ALL_tri', '=0.5 * $Inputs.B$35 * ($Inputs.B$42 * $Inputs.B$35 + 2 * SQRT(1 + $Inputs.B$51) * ($Inputs.B$50 - $Inputs.B$49))'],
        ['', 'hp_ALL_tri', '=$Inputs.B$35/3'],
        ['', 'Pp_ALL', '=C38 + C40'],
        ['', 'hp_ALL', '=(C38*C39 + C40*C41)/C42'],
        ['6.4.2.3 Lateral Water Force at Passive Side', 'Pp_w', '=0.5 * $Inputs.B$43 * ($Inputs.B$22 - $Inputs.B$27)^2'],
        ['', 'hp_w', '=$Inputs.B$35 + $Inputs.B$33 + ($Inputs.B$22 - $Inputs.B$27)/3'],
        ['Total Passive Lateral Force', 'Pp', '=C36 + C42 + C44'],
        ['', 'hp', '=(C36*C37 + C42*C43 + C44*C45)/C46'],
        ['6.5.1 Vertical Forces', 'Va_MD', '=$Inputs.B$33 * ($Inputs.B$45 + $Inputs.B$46)/2'],
        ['', 'Va_ALL', '=$Inputs.B$35 * ($Inputs.B$49 + $Inputs.B$50)/2'],
        ['', 'Va', '=C48 + C49'],
        ['', 'Vp_MD', '=$Inputs.B$33 * ($Inputs.B$47 + $Inputs.B$48)/2'],
        ['', 'Vp_ALL', '=C49'],
        ['', 'Vp', '=C51 + C52'],
        ['6.5.2 Gravitational Forces', 'W_fill', '=$Inputs.B$39 * $Inputs.B$32 * $Inputs.B$10'],
        ['', 'x_fill', '=$Inputs.B$10/2 + $Inputs.B$9'],
        ['', 'W_dm', '=($Inputs.B$40 * $Inputs.B$33 + $Inputs.B$42 * $Inputs.B$35) * $Inputs.B$8'],
        ['', 'x_dm', '=$Inputs.B$8/2'],
        ['', 'W_U_above', '=$Inputs.B$43 * ($Inputs.B$22 - $Inputs.B$27) * $Inputs.B$9'],
        ['', 'x_U_above', '=$Inputs.B$9/2'],
        ['', 'W_qLL', '=$Inputs.B$66 * $Inputs.B$10'],
        ['', 'x_qLL', '=C55'],
        ['', 'W', '=C54 + C56 + C58 + C60'],
        ['', 'x_W', '=(C54*C55 + C56*C57 + C58*C59 + C60*C61)/C62'],
        ['6.5.3 Uplift Force', 'U_rect', '=$Inputs.B$43 * ($Inputs.B$22 - $Inputs.B$11) * $Inputs.B$8'],
        ['', 'x_U_rect', '=$Inputs.B$8/2'],
        ['', 'U_tri', '=0.5 * $Inputs.B$43 * ($Inputs.B$21 - $Inputs.B$22) * $Inputs.B$8'],
        ['', 'x_U_tri', '=2 * $Inputs.B$8 / 3'],
        ['', 'U', '=C64 + C66'],
        ['', 'x_U', '=(C64*C65 + C66*C67)/C68'],
        ['6.5.4 Vertical Reaction Force', 'N_W', '=C62'],
        ['', 'N_Va', '=C50'],
        ['', 'N_Vp', '=-C53'],
        ['', 'N', '=C70 + C71 + C72 + $Inputs.B$63'],
        ['', 'x_N', '=IF(C73=0,"Error",(C46*C47 + C62*C63 + C50*$Inputs.B$8 + $Inputs.B$63*$Inputs.B$65 - C30*C31 - $Inputs.B$62*$Inputs.B$64)/C73)'],
        ['', 'e', '=$Inputs.B$8/2 - C74'],
    ]

    for row in calc_data:
        ws_calc.append(row)
    apply_styling(ws_calc, 2, len(calc_data) + 2)

    # Stability sheet
    ws_stab = wb.create_sheet('Stability')
    ws_stab['A1'] = 'Section 6.6 - Stability Analyses'
    ws_stab.merge_cells('A1:D1')
    ws_stab['A2'] = 'External and internal stability checks.'
    ws_stab.append(['Step', 'Parameter', 'Value', 'Safe'])

    stab_data = [
        ['6.6.1.1 External Stability: Sliding', 'Fa_sliding', '=Calculations!C30 + $Inputs.B$62', ''],
        ['', 'Fr_sliding', '=$Inputs.B$50 * $Inputs.B$8 + Calculations!C46', ''],
        ['', 'Safe against Sliding', '=IF(C5<C6,"Yes","No")', ''],
        ['6.6.1.2 Overturning', 'Mo', '=Calculations!C30 * Calculations!C31 + $Inputs.B$62 * $Inputs.B$64 + Calculations!C68 * Calculations!C69', ''],
        ['', 'Mr', '=Calculations!C62 * Calculations!C63 + Calculations!C46 * Calculations!C47 + Calculations!C50 * $Inputs.B$8 + $Inputs.B$63 * $Inputs.B$65', ''],
        ['', 'Safe against Overturning', '=IF(C8<C9,"Yes","No")', ''],
        ['6.6.1.3 Bearing Capacity', 'sigma_max', '=IF(Calculations!C73=0,"Error",Calculations!C73/$Inputs.B$8*(1+6*ABS(Calculations!C75)/$Inputs.B$8))', ''],
        ['', 'sigma_min', '=IF(Calculations!C73=0,"Error",Calculations!C73/$Inputs.B$8*(1-6*ABS(Calculations!C75)/$Inputs.B$8))', ''],
        ['', 'sc', '=1 + 0.1 * $Inputs.B$13 / Calculations!C74', ''],
        ['', 'qall', '=$Inputs.B$53 * $Inputs.B$50 * C9 + Calculations!C62/$Inputs.B$8', ''],
        ['', 'Safe against Bearing Failure', '=IF(AND(C7<C10,C8>0),"Yes","No")', ''],
        ['6.6.2.1 Internal Stability: Crushing', 'sigma_v_prime', '=$Inputs.B$66 + $Inputs.B$39 * $Inputs.B$32 + $Inputs.B$40 * $Inputs.B$33 + $Inputs.B$42 * $Inputs.B$35 - $Inputs.B$43 * ($Inputs.B$21 - $Inputs.B$11)', ''],
        ['', 'u_bottom', '=$Inputs.B$43 * ($Inputs.B$21 - $Inputs.B$11)', ''],
        ['', 'td', '=C12 - $Inputs.B$52 * C13 - C14', ''],
        ['', 'qc_all', '=2 * $Inputs.B$59', ''],
        ['', 'Safe against Crushing', '=IF(C15<C16,"Yes","No")', ''],
        ['6.6.2.2 Vertical Shearing', 'sigma_land', '=IF(Calculations!C75<0,C7,C8)', ''],
        ['', 'sigma_sea', '=IF(Calculations!C75<0,C8,C7)', ''],
        ['', 'sigma_crit', '=C17 + (C18 - C17) * $Inputs.B$9 / $Inputs.B$8', ''],
        ['', 'N_crit', '=(C17 + C18)/2 * $Inputs.B$9', ''],
        ['', 'W_crit', '=($Inputs.B$40 * $Inputs.B$33 + $Inputs.B$42 * $Inputs.B$35 + $Inputs.B$43 * ($Inputs.B$22 - $Inputs.B$27)) * $Inputs.B$9', ''],
        ['', 'tau_v', '=ABS(C20 - C21 + Calculations!C53) * $Inputs.B$14 / ($Inputs.B$13 * $Inputs.B$35 + $Inputs.B$15 * $Inputs.B$16)', ''],
        ['', 'tau_v_all', '=$Inputs.B$17 / $Inputs.B$13 * $Inputs.B$59', ''],
        ['', 'Safe against Vertical Shearing', '=IF(C22<C23,"Yes","No")', '']
        # Add remaining stability checks up to row 43 as needed
    ]

    for row in stab_data:
        ws_stab.append(row)
    apply_styling(ws_stab, 2, len(stab_data) + 2)

    # Summary sheet
    ws_sum = wb.create_sheet('Summary')
    ws_sum['A1'] = 'Calculation Summary'
    ws_sum.merge_cells('A1:C1')
    ws_sum['A2'] = '=IF(AND(Stability!D3="Yes",Stability!D6="Yes",Stability!D11="Yes",Stability!D16="Yes",Stability!D24="Yes"),"Design is safe against all checks","Review failed checks")'

    # Set workbook to automatic calculation
    wb.properties.calculationMode = 'automatic'

    # Save to temporary file first
    wb.save(temp_file)
    logging.info(f"Temporary file saved as {temp_file}")

    # Validate and move to final file
    if os.path.exists(temp_file):
        os.replace(temp_file, final_file)
        logging.info(f"Final file saved as {final_file}")
    else:
        raise FileNotFoundError("Temporary file not created, check logs for errors")

except Exception as e:
    logging.error(f"Error occurred: {str(e)}")
    if os.path.exists(temp_file):
        os.remove(temp_file)
    raise

print("DCM Design Tool 'DCM_Design_Tool.xlsx' generated successfully.")
